// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

contract MultiSigWallet {
    event Deposit (address indexed sender, uint amount );
    // where transactions stores
    event Submit (uint indexed txId);
    event Approve (address indexed owner, uint indexed txId);
    event Revoke (address indexed owner, uint indexed txId);
    event Executive (uint indexed txId);

// structure of reansaction
    struct Transaction {
        address to;
        uint value;
        bytes data;
        bool executed;
    }
    
    // storing owners 
    address[] public owners;
    // check of multisig wallet
    mapping(address => bool) public isOwner;
    // approvals
    uint public required;

// each transaction can be execution after apporval 
    Transaction[] public transactions;
    // uint - index of transaction. , address of owner  
    // & boolen - indecate is apporved by owner or not.  
    mapping(uint => mapping (address => bool)) public approved;
     



modifier onlyOwner() {
    require(isOwner[msg.sender], "not owner");
    // if check is successful, 
    // and allow execusion fo rest functions if one of wners
    _; 
}

// check if transaction exists
modifier txExists( uint _txId ) {
    require (_txId < transactions.length , "tx doestn exist ");
    _;
}

// not approved by mapping 
modifier notApproved( uint _txId ) {
    require(!approved[_txId][msg.sender], "tx already approved");
    _;
}

// 
modifier notExecuted(uint _txId) {
    require (!transactions[_txId].executed, "tx already executed");
    _;
}


// constructor of multisig
    constructor(address[ ] memory _owners,  uint _required) {
        // at least one owner 
        require(_owners.length>0, "owner required");
        require(
            _required > 0 && _required <= _owners.length,
            "invalid required number of owners"
        );

// veryfing that owners exist and unique
        for (uint i ;  i < _owners.length; i++){
            address owner = _owners[i];
            require(owner != address(0), "invalid owner");
// making sure that owner is unique 
            require(!isOwner[owner], "owner is not unique ");

// inserting new owner
            isOwner[owner] = true;
            owners.push(owner);
        }
        required = _required;
    }
    // sigwallet recivng eather

    receive() external payable {
        emit Deposit(msg.sender  , msg.value);
    }

// calldata is cheaper on gas
    function submit(address _to, uint _value, bytes calldata _data)
        external
        onlyOwner
    {
        transactions.push(Transaction ({
            to: _to,
            value: _value,
            data: _data,
            executed: false
        }));
        // since it 
        emit Submit(transactions.length - 1) ; 
    }

// approve execution of transaction
function approve(uint _txId)
    external
    onlyOwner
    txExists(_txId)
    notApproved(_txId)
    notExecuted(_txId)
    {
        approved [_txId][msg.sender] = true;
        // emiting event
        emit Approve(msg.sender, _txId);
    }


    // private function
    function _getApprovalCount (uint _txId) private view returns (uint count) {
        // for each owner we check was it checked or not
        for (uint i ; i < owners.length; i++) {
            if(approved [_txId][owners[i]]) {
                count += 1;
            }
        }
    }


        // executing transaction 
    function execute(uint _txId) external txExists(_txId) notExecuted(_txId) {
            // checking the approval step
            require (_getApprovalCount(_txId) >= required, "approvals < required");
            // taking data stored in transaction struck & update it..
            Transaction storage transaction = transactions [_txId];
            
            transaction.executed = true;

            // checking was the call successful
            (bool success, ) =  transaction.to.call{value: transaction.value}(
                transaction.data
            );

            require(success, "tx failed");
            emit Executive(_txId);  
            
    }
        // stage if we undoo approval (revoking it back is previouse status) 
    
    function revoke(uint _txId)
    external
    onlyOwner
    txExists(_txId)
    notExecuted(_txId)
    {

        require(approved[_txId][msg.sender], "tx not approved");
        approved[_txId][msg.sender] = false;
        emit Revoke(msg.sender, _txId);
    }
}
